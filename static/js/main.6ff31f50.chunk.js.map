{"version":3,"sources":["assets/ring.png","utils/constants.js","components/ImageOverlay/ImageOverlay.jsx","components/Canvas/Canvas.jsx","components/Camera/Camera.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","CAMERA_CONSTRAINTS","video","width","min","ideal","max","height","facingMode","exact","ImageOverlay","className","src","img","alt","Canvas","props","canvas","image","downloadBtn","takeCanvasSnapshot","ctx","getContext","videoWidth","videoHeight","posX","imgWidth","posY","imgHeight","sourceWidth","sourceHeight","destWidth","destHeight","drawImage","handleCaptureImage","setState","state","base64","toDataURL","setTimeout","click","bind","Container","Row","id","ref","style","display","href","this","download","Button","onClick","React","Component","Camera","isMobile","useState","streamCanvas","setStreamCanvas","front","setFront","webcamRef","useRef","canvasRef","fluid","Col","audio","videoConstraints","constraints","getConstraints","onUserMedia","current","f","varian","icon","faExchangeAlt","App","setIsMobile","useEffect","window","innerWidth","offsetWidth","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ff31f50.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ring.d7654c97.png\";","export const CAMERA_CONSTRAINTS = {\r\n\tvideo: {\r\n\t\twidth: { min: 375, ideal: 768, max: 1440 },\r\n\t\theight: { min: 665, ideal: 635, max: 975 },\r\n\t\tfacingMode: { exact: 'environment' },\r\n\t}\r\n};\r\n\r\nexport const MOBILE_BREAKPOINT = 768;\r\n","import React from 'react';\r\nimport img from '../../assets/ring.png';\r\nimport './styles.scss';\r\n\r\nconst ImageOverlay = () => {\r\n\treturn <img className=\"image-overlay\" src={img} alt=\"\"/>;\r\n};\r\n\r\nexport default ImageOverlay;\r\n","import React from 'react';\r\nimport img from '../../assets/ring.png';\r\nimport './styles.scss';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nclass Canvas extends React.Component {\r\n\tcanvas = null;\r\n\timage = null;\r\n\tdownloadBtn = null;\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.handleCaptureImage = this.handleCaptureImage.bind(this);\r\n\r\n\t\tthis.state = {\r\n\t\t\tbase64: '',\r\n\t\t};\r\n\t};\r\n\r\n\ttakeCanvasSnapshot = () => {\r\n\t\tconst ctx = this.canvas.getContext('2d');\r\n\r\n\t\tconst videoWidth = this.props.video.video.videoWidth;\r\n\t\tconst videoHeight = this.props.video.video.videoHeight;\r\n\r\n\t\tthis.canvas.width = videoWidth;\r\n\t\tthis.canvas.height = videoHeight;\r\n\r\n\t\tconst imgWidth = 100;\r\n\t\tconst imgHeight = 100;\r\n\r\n\t\tconst posX = this.canvas.width / 2 - imgWidth / 2;\r\n\t\tconst posY = this.canvas.height / 2 - imgHeight / 2;\r\n\r\n\t\tconst sourceX = 5;\r\n\t\tconst sourceY = 5;\r\n\t\tconst sourceWidth = videoWidth - sourceX;\r\n\t\tconst sourceHeight = videoHeight;\r\n\t\tconst destX = 5;\r\n\t\tconst destY = 5;\r\n\t\tconst destWidth = this.canvas.width - 10;\r\n\t\tconst destHeight = this.canvas.height - 5;\r\n\r\n\t\tctx.drawImage(this.props.video.video, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);\r\n\t\tctx.drawImage(this.image, posX, posY, imgWidth, imgHeight);\r\n\t};\r\n\r\n\thandleCaptureImage = () => {\r\n\t\tif (!this.props.video) return;\r\n\r\n\t\tthis.takeCanvasSnapshot();\r\n\r\n\t\tthis.setState(state => ({\r\n\t\t\t...state,\r\n\t\t\tbase64: this.canvas.toDataURL(),\r\n\t\t}));\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.downloadBtn.click();\r\n\t\t},0);\r\n\t};\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Container>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<canvas id=\"canvas\" ref={ref => this.canvas = ref}> Your browser doesn't support canvas. </canvas>\r\n\t\t\t\t</Row>\r\n\t\t\t\t<img ref={ref => this.image = ref} src={img} alt=\"\" style={{ display: 'none' }} />\r\n\t\t\t\t<a ref={ref => this.downloadBtn = ref} href={this.state.base64} download style={{display: 'none'}} />\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Button onClick={this.handleCaptureImage}>\r\n\t\t\t\t\t\tCapture\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Row>\r\n\t\t\t</Container>\r\n\t\t)\r\n\t};\r\n}\r\n\r\nexport default Canvas;\r\n","import React, {useState, useRef} from 'react';\r\nimport Webcam from 'react-webcam';\r\nimport {CAMERA_CONSTRAINTS} from \"../../utils/constants\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ImageOverlay from '../ImageOverlay/ImageOverlay';\r\nimport {faExchangeAlt} from \"@fortawesome/free-solid-svg-icons/faExchangeAlt\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport Canvas from \"../Canvas/Canvas\";\r\nimport './styles.scss';\r\n\r\nconst Camera = ({isMobile}) => {\r\n\tconst [streamCanvas, setStreamCanvas] = useState(false);\r\n\tconst [front, setFront] = useState(false);\r\n\tconst webcamRef = useRef(null);\r\n\tconst canvasRef = useRef(null);\r\n\tconst handleCameraChange = () => {\r\n\t\tsetFront(f => !f);\r\n\t};\r\n\r\n\tconst getConstraints = () => {\r\n\t\tlet constraints = CAMERA_CONSTRAINTS;\r\n\t\tif (isMobile) {\r\n\t\t\tconstraints = {\r\n\t\t\t\t...constraints,\r\n\t\t\t\tvideo: {\r\n\t\t\t\t\t...constraints.video,\r\n\t\t\t\t\tfacingMode: front ? 'user' : {exact: 'environment'},\r\n\t\t\t\t},\r\n\t\t\t\tfacingMode: front ? 'user' : {exact: 'environment'},\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tconstraints = {\r\n\t\t\t\t...constraints,\r\n\t\t\t\tvideo: {\r\n\t\t\t\t\t...constraints.video,\r\n\t\t\t\t\tfacingMode: 'user',\r\n\t\t\t\t},\r\n\t\t\t\tfacingMode: 'user',\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn constraints;\r\n\t};\r\n\r\n\tconst handleUserMediaStart = () => {\r\n\t\tsetStreamCanvas(true);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Container className=\"camera-container\" fluid=\"md\">\r\n\t\t\t<Row className=\"justify-content-md-center mb-5\">\r\n\t\t\t\t<Col className=\"d-flex justify-content-center image-overlay-container\">\r\n\t\t\t\t\t<Webcam\r\n\t\t\t\t\t\tref={webcamRef}\r\n\t\t\t\t\t\tclassName=\"video-container\"\r\n\t\t\t\t\t\taudio={false}\r\n\t\t\t\t\t\tvideoConstraints={getConstraints()}\r\n\t\t\t\t\t\tonUserMedia={handleUserMediaStart}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<ImageOverlay/>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t\t<Row className=\"justify-content-md-center mb-3\">\r\n\t\t\t\t<Col className=\"d-flex justify-content-center\">\r\n\t\t\t\t\t<Canvas ref={canvasRef} {...(streamCanvas && ({video: webcamRef.current}))} />\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t\t<Row className=\"justify-content-md-center\">\r\n\t\t\t\t<Col className=\"d-flex justify-content-center\">\r\n\t\t\t\t\t{isMobile && (\r\n\t\t\t\t\t\t\t<Button onClick={handleCameraChange} varian=\"light\">\r\n\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faExchangeAlt}/>\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</Container>\r\n\t)\r\n};\r\n\r\nexport default Camera;\r\n","import React, {useEffect, useState} from 'react';\r\nimport './App.scss';\r\nimport Camera from \"./components/Camera/Camera\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { MOBILE_BREAKPOINT } from \"./utils/constants\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst App = () => {\r\n    const [isMobile, setIsMobile] = useState(false);\r\n\r\n    useEffect(() => {\r\n       const w = window.innerWidth || window.offsetWidth;\r\n\r\n       if (w < MOBILE_BREAKPOINT) {\r\n           setIsMobile(true);\r\n       }\r\n\r\n    }, [isMobile]);\r\n\r\n\treturn (\r\n\t    <div className=\"app-container\">\r\n            <Camera isMobile={isMobile} />\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}