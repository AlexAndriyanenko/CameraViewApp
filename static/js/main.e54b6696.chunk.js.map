{"version":3,"sources":["assets/ring.png","utils/constants.js","components/ImageOverlay/ImageOverlay.jsx","components/Camera/Camera.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","CAMERA_CONSTRAINTS","video","width","min","ideal","max","height","facingMode","exact","ImageOverlay","className","src","img","alt","Camera","isMobile","useState","stopped","setStopped","front","setFront","useEffect","constraints","window","navigator","mediaDevices","getUserMedia","then","stream","document","getElementById","srcObject","onloadedmetadata","pause","play","toast","success","position","POSITION","TOP_RIGHT","catch","e","error","name","constraint","Container","fluid","Row","Col","id","onClick","s","Button","variant","f","varian","icon","faExchangeAlt","App","setIsMobile","innerWidth","offsetWidth","Boolean","location","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister","console","message"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,kC,kNCA9BC,G,MAAqB,CACjCC,MAAO,CACNC,MAAO,CAAEC,IAAK,IAAKC,MAAO,IAAKC,IAAK,MACpCC,OAAQ,CAAEH,IAAK,IAAKC,MAAO,IAAKC,IAAK,KACrCE,WAAY,CAAEC,MAAO,kB,gDCIRC,G,MAJM,WACpB,OAAO,yBAAKC,UAAU,gBAAgBC,IAAKC,IAAKC,IAAI,O,uBCsFtCC,G,MA/EA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACFC,oBAAS,GADP,mBACzBC,EADyB,KAChBC,EADgB,OAENF,oBAAS,GAFH,mBAEzBG,EAFyB,KAElBC,EAFkB,KAGhCC,qBAAU,WACT,IAAMC,EAActB,EAEhBe,IACHO,EAAYrB,MAAMM,WAAaY,EAAQ,OAAS,CAAEX,MAAO,gBAG1De,OAAOC,UAAUC,aAAaC,aAAaJ,GACzCK,MAAK,SAACC,GACN,IAAM3B,EAAQ4B,SAASC,eAAe,SACtC7B,EAAM8B,UAAYH,EAClB3B,EAAM+B,iBAAmB,WACpBf,EACHhB,EAAMgC,QAIPhC,EAAMiC,QAGPC,IAAMC,QAAQ,qBAAsB,CAAEC,SAAUF,IAAMG,SAASC,eAE/DC,OAAM,SAACC,GACPN,IAAMO,MAAN,uBACKD,EAAEE,KADP,kDAEUF,EAAEG,WAFZ,cAGG,CAAEP,SAAUF,IAAMG,SAASC,iBAE9B,CAACtB,EAASE,EAAOJ,IAUpB,OACC,kBAAC8B,EAAA,EAAD,CAAWnC,UAAU,mBAAmBoC,MAAM,MAC7C,kBAACC,EAAA,EAAD,CAAKrC,UAAU,kCACd,kBAACsC,EAAA,EAAD,CAAKtC,UAAU,iCACd,2BAAOuC,GAAG,SAAV,gDAKF,kBAACF,EAAA,EAAD,CAAKrC,UAAU,6BACd,kBAACsC,EAAA,EAAD,CAAKtC,UAAU,iCACd,yBAAKA,UAAS,UAAKK,EAAW,OAAS,IAAMmC,QAnBvB,WACzBhC,GAAW,SAAAiC,GAAC,OAAKA,OAmBZlC,EACA,kBAACmC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,QAIA,kBAACD,EAAA,EAAD,CAAQC,QAAQ,UAAhB,UAMDtC,GACA,yBAAKmC,QA5BiB,WAC1B9B,GAAS,SAAAkC,GAAC,OAAKA,OA4BV,kBAACF,EAAA,EAAD,CAAQG,OAAO,SACd,kBAAC,IAAD,CAAiBC,KAAMC,sBAO5B,kBAAC,EAAD,SC1DYC,G,YApBH,WAAO,IAAD,EACkB1C,oBAAS,GAD3B,mBACPD,EADO,KACG4C,EADH,KAYjB,OATGtC,qBAAU,YACGE,OAAOqC,YAAcrC,OAAOsC,aHJZ,KGOtBF,GAAY,KAGhB,CAAC5C,IAGH,yBAAKL,UAAU,iBACR,kBAAC,EAAD,CAAQK,SAAUA,IAClB,kBAAC,IAAD,SCXQ+C,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStC,SAASC,eAAe,SD6H3C,kBAAmBN,WACrBA,UAAU4C,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEd/B,OAAM,SAAAE,GACL8B,QAAQ9B,MAAMA,EAAM+B,c","file":"static/js/main.e54b6696.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ring.13fff1e5.png\";","export const CAMERA_CONSTRAINTS = {\r\n\tvideo: {\r\n\t\twidth: { min: 375, ideal: 768, max: 1440 },\r\n\t\theight: { min: 665, ideal: 635, max: 975 },\r\n\t\tfacingMode: { exact: 'environment' },\r\n\t}\r\n};\r\n\r\nexport const MOBILE_BREAKPOINT = 768;\r\n","import React from 'react';\r\nimport img from '../../assets/ring.png';\r\nimport './styles.scss';\r\n\r\nconst ImageOverlay = () => {\r\n\treturn <img className=\"image-overlay\" src={img} alt=\"\"/>;\r\n};\r\n\r\nexport default ImageOverlay;\r\n","import React, {useEffect, useState} from 'react';\r\nimport { CAMERA_CONSTRAINTS } from \"../../utils/constants\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ImageOverlay from '../ImageOverlay/ImageOverlay';\r\nimport { faExchangeAlt } from \"@fortawesome/free-solid-svg-icons/faExchangeAlt\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { toast } from \"react-toastify\";\r\nimport './styles.scss';\r\n\r\nconst Camera = ({ isMobile }) => {\r\n\tconst [stopped, setStopped] = useState(false);\r\n\tconst [front, setFront] = useState(false);\r\n\tuseEffect(() => {\r\n\t\tconst constraints = CAMERA_CONSTRAINTS;\r\n\r\n\t\tif (isMobile) {\r\n\t\t\tconstraints.video.facingMode = front ? 'user' : { exact: 'environment' };\r\n\t\t}\r\n\r\n\t\twindow.navigator.mediaDevices.getUserMedia(constraints)\r\n\t\t\t.then((stream) => {\r\n\t\t\t\tconst video = document.getElementById('video');\r\n\t\t\t\tvideo.srcObject = stream;\r\n\t\t\t\tvideo.onloadedmetadata = () => {\r\n\t\t\t\t\tif (stopped) {\r\n\t\t\t\t\t\tvideo.pause();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvideo.play();\r\n\t\t\t\t};\r\n\r\n\t\t\t\ttoast.success('Camera works fine!', { position: toast.POSITION.TOP_RIGHT });\r\n\t\t\t})\r\n\t\t\t.catch((e) => {\r\n\t\t\t\ttoast.error(`\r\n\t\t\t\tAn ${e.name} error has occurred: \r\n\t\t\t\tsource: ${e.constraint}\r\n\t\t\t\t`, { position: toast.POSITION.TOP_RIGHT });\r\n\t\t\t})\r\n\t}, [stopped, front, isMobile]);\r\n\r\n\tconst handleButtonClick = () => {\r\n\t\tsetStopped(s => !s);\r\n\t};\r\n\r\n\tconst handleCameraChange = () => {\r\n\t\tsetFront(f => !f);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Container className=\"camera-container\" fluid=\"md\">\r\n\t\t\t<Row className=\"justify-content-md-center mb-5\">\r\n\t\t\t\t<Col className=\"d-flex justify-content-center\">\r\n\t\t\t\t\t<video id=\"video\">\r\n\t\t\t\t\t\tYour browser doesn't support this feature.\r\n\t\t\t\t\t</video>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t\t<Row className=\"justify-content-md-center\">\r\n\t\t\t\t<Col className=\"d-flex justify-content-center\">\r\n\t\t\t\t\t<div className={`${isMobile ? 'mr-5' : ''}`} onClick={handleButtonClick}>\r\n\t\t\t\t\t\t{stopped ? (\r\n\t\t\t\t\t\t\t<Button variant=\"primary\">\r\n\t\t\t\t\t\t\t\tPlay\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<Button variant=\"danger\">\r\n\t\t\t\t\t\t\t\tPause\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t{isMobile && (\r\n\t\t\t\t\t\t<div onClick={handleCameraChange}>\r\n\t\t\t\t\t\t\t<Button varian=\"light\">\r\n\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faExchangeAlt} />\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\r\n\t\t\t<ImageOverlay />\r\n\t\t</Container>\r\n\t)\r\n};\r\n\r\nexport default Camera;\r\n","import React, {useEffect, useState} from 'react';\r\nimport './App.scss';\r\nimport Camera from \"./components/Camera/Camera\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { MOBILE_BREAKPOINT } from \"./utils/constants\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst App = () => {\r\n    const [isMobile, setIsMobile] = useState(false);\r\n\r\n    useEffect(() => {\r\n       const w = window.innerWidth || window.offsetWidth;\r\n\r\n       if (w < MOBILE_BREAKPOINT) {\r\n           setIsMobile(true);\r\n       }\r\n\r\n    }, [isMobile]);\r\n\r\n\treturn (\r\n\t    <div className=\"app-container\">\r\n            <Camera isMobile={isMobile} />\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}