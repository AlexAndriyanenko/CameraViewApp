{"version":3,"sources":["utils/constants.js","components/ImageOverlay/ImageOverlay.jsx","components/Canvas/Canvas.jsx","components/Camera/Camera.jsx","App.js","serviceWorker.js","index.js","assets/ring.png"],"names":["CAMERA_CONSTRAINTS","video","width","min","ideal","max","height","facingMode","exact","ImageOverlay","className","src","img","alt","Canvas","canvas","image","prevProps","prevState","snapshot","this","props","ctx","getContext","addEventListener","self","videoWidth","videoHeight","posX","imgWidth","posY","imgHeight","sourceWidth","sourceHeight","destWidth","destHeight","loop","drawImage","requestAnimationFrame","id","ref","style","display","React","Component","Camera","isMobile","useState","streamCanvas","setStreamCanvas","front","setFront","base64","setBase64","webcamRef","useRef","canvasRef","downLoadRef","Container","fluid","Row","Col","audio","videoConstraints","constraints","getConstraints","onUserMedia","current","stream","Button","onClick","document","getElementById","toDataURL","setTimeout","click","f","varian","icon","faExchangeAlt","href","download","App","setIsMobile","useEffect","window","innerWidth","offsetWidth","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.9a8739af.chunk.js","sourcesContent":["export const CAMERA_CONSTRAINTS = {\r\n\tvideo: {\r\n\t\twidth: { min: 375, ideal: 768, max: 1440 },\r\n\t\theight: { min: 665, ideal: 635, max: 975 },\r\n\t\tfacingMode: { exact: 'environment' },\r\n\t}\r\n};\r\n\r\nexport const MOBILE_BREAKPOINT = 768;\r\n","import React from 'react';\r\nimport img from '../../assets/ring.png';\r\nimport './styles.scss';\r\n\r\nconst ImageOverlay = () => {\r\n\treturn <img className=\"image-overlay\" src={img} alt=\"\"/>;\r\n};\r\n\r\nexport default ImageOverlay;\r\n","import React from 'react';\r\nimport img from '../../assets/ring.png';\r\nimport './styles.scss';\r\n\r\nclass Canvas extends React.Component {\r\n\tcanvas = null;\r\n\timage = null;\r\n\r\n\tcomponentDidUpdate(prevProps, prevState, snapshot) {\r\n\t\tif (!this.props.video) return;\r\n\r\n\t\tconst ctx = this.canvas.getContext('2d');\r\n\r\n\t\tthis.props.video.video.addEventListener('play', () => {\r\n\t\t\tconst self = this;\r\n\t\t\tconst videoWidth = this.props.video.video.videoWidth;\r\n\t\t\tconst videoHeight = this.props.video.video.videoHeight;\r\n\r\n\t\t\tthis.canvas.width = videoWidth;\r\n\t\t\tthis.canvas.height = videoHeight;\r\n\r\n\t\t\tconst imgWidth = 100;\r\n\t\t\tconst imgHeight = 100;\r\n\r\n\t\t\tconst posX = this.canvas.width / 2 - imgWidth / 2;\r\n\t\t\tconst posY = this.canvas.height / 2 - imgHeight / 2;\r\n\r\n\t\t\tconst sourceX = 5;\r\n\t\t\tconst sourceY = 5;\r\n\t\t\tconst sourceWidth = videoWidth - sourceX;\r\n\t\t\tconst sourceHeight = videoHeight;\r\n\t\t\tconst destX = 5;\r\n\t\t\tconst destY = 5;\r\n\t\t\tconst destWidth = this.canvas.width - 10;\r\n\t\t\tconst destHeight = this.canvas.height - 5;\r\n\r\n\t\t\tconst loop = () => {\r\n\t\t\t\tctx.drawImage(self.props.video.video, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);\r\n\t\t\t\tctx.drawImage(self.image, posX, posY, imgWidth, imgHeight);\r\n\t\t\t\trequestAnimationFrame(loop);\r\n\t\t\t};\r\n\r\n\t\t\tloop();\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<canvas id=\"canvas\" ref={ref => this.canvas = ref}> Your browser doesn't support canvas. </canvas>\r\n\t\t\t\t<img ref={ref => this.image = ref} src={img} alt=\"\" style={{ display: 'none' }} />\r\n\t\t\t</>\r\n\t\t)\r\n\t}\r\n};\r\n\r\nexport default Canvas;\r\n","import React, {useState, useRef} from 'react';\r\nimport Webcam from 'react-webcam';\r\nimport {CAMERA_CONSTRAINTS} from \"../../utils/constants\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ImageOverlay from '../ImageOverlay/ImageOverlay';\r\nimport {faExchangeAlt} from \"@fortawesome/free-solid-svg-icons/faExchangeAlt\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport Canvas from \"../Canvas/Canvas\";\r\nimport './styles.scss';\r\n\r\nconst Camera = ({isMobile}) => {\r\n\tconst [streamCanvas, setStreamCanvas] = useState(false);\r\n\tconst [front, setFront] = useState(false);\r\n\tconst [base64, setBase64] = useState('');\r\n\tconst webcamRef = useRef(null);\r\n\tconst canvasRef = useRef(null);\r\n\tconst downLoadRef = useRef(null);\r\n\r\n\tconst handleCameraChange = () => {\r\n\t\tsetFront(f => !f);\r\n\t};\r\n\r\n\tconst getConstraints = () => {\r\n\t\tlet constraints = CAMERA_CONSTRAINTS;\r\n\t\tif (isMobile) {\r\n\t\t\tconstraints = {\r\n\t\t\t\t...constraints,\r\n\t\t\t\tvideo: {\r\n\t\t\t\t\t...constraints.video,\r\n\t\t\t\t\tfacingMode: front ? 'user' : {exact: 'environment'},\r\n\t\t\t\t},\r\n\t\t\t\tfacingMode: front ? 'user' : {exact: 'environment'},\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tconstraints = {\r\n\t\t\t\t...constraints,\r\n\t\t\t\tvideo: {\r\n\t\t\t\t\t...constraints.video,\r\n\t\t\t\t\tfacingMode: 'user',\r\n\t\t\t\t},\r\n\t\t\t\tfacingMode: 'user',\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn constraints;\r\n\t};\r\n\r\n\tconst handleUserMediaStart = () => {\r\n\t\tconst s = webcamRef.current.stream;\r\n\t\tsetStreamCanvas(true);\r\n\t};\r\n\r\n\tconst handleCaptureImage = () => {\r\n\t\tconst canvas = document.getElementById('canvas');\r\n\t\tsetBase64(canvas.toDataURL());\r\n\t\tsetTimeout(() => {\r\n\t\t\tdownLoadRef.current.click();\r\n\t\t},0);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Container className=\"camera-container\" fluid=\"md\">\r\n\t\t\t<Row className=\"justify-content-md-center mb-5\">\r\n\t\t\t\t<Col className=\"d-flex justify-content-center image-overlay-container\">\r\n\t\t\t\t\t<Webcam\r\n\t\t\t\t\t\tref={webcamRef}\r\n\t\t\t\t\t\tclassName=\"video-container\"\r\n\t\t\t\t\t\taudio={false}\r\n\t\t\t\t\t\tvideoConstraints={getConstraints()}\r\n\t\t\t\t\t\tonUserMedia={handleUserMediaStart}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Canvas ref={canvasRef} {...(streamCanvas && ({video: webcamRef.current}))} />\r\n\t\t\t\t\t<ImageOverlay/>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t\t<Row className=\"justify-content-md-center\">\r\n\t\t\t\t<Col className=\"d-flex justify-content-center\">\r\n\t\t\t\t\t\t<Button onClick={handleCaptureImage}>\r\n\t\t\t\t\t\t\t Capture\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col className=\"d-flex justify-content-center\">\r\n\t\t\t\t\t{isMobile && (\r\n\t\t\t\t\t\t\t<Button onClick={handleCameraChange} varian=\"light\">\r\n\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faExchangeAlt}/>\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\r\n\t\t\t<a ref={downLoadRef} href={base64} download style={{display: 'none'}} />\r\n\t\t</Container>\r\n\t)\r\n};\r\n\r\nexport default Camera;\r\n","import React, {useEffect, useState} from 'react';\r\nimport './App.scss';\r\nimport Camera from \"./components/Camera/Camera\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { MOBILE_BREAKPOINT } from \"./utils/constants\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst App = () => {\r\n    const [isMobile, setIsMobile] = useState(false);\r\n\r\n    useEffect(() => {\r\n       const w = window.innerWidth || window.offsetWidth;\r\n\r\n       if (w < MOBILE_BREAKPOINT) {\r\n           setIsMobile(true);\r\n       }\r\n\r\n    }, [isMobile]);\r\n\r\n\treturn (\r\n\t    <div className=\"app-container\">\r\n            <Camera isMobile={isMobile} />\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/ring.d7654c97.png\";"],"sourceRoot":""}